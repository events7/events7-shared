{
  "openapi": "3.0.0",
  "paths": {
    "/v1/api": {
      "get": {
        "operationId": "AppController_getHello_v1",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["App"]
      }
    },
    "/v1/api/events": {
      "post": {
        "operationId": "EventsController_create_v1",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateEventDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponseTypeEventPost"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Usually triggered if the request body or provided parameter is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponseType"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden resource. Try again later or check with adminstrators that you have correct permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponseType"
                }
              }
            }
          }
        },
        "tags": ["Events"]
      },
      "get": {
        "operationId": "EventsController_findAll_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Event" }
                }
              }
            }
          }
        },
        "tags": ["Events"]
      }
    },
    "/v1/api/events/{id}": {
      "get": {
        "operationId": "EventsController_findOne_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the event if found or null if not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponseTypeEventGetOne"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Usually triggered if the request body or provided parameter is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponseType"
                }
              }
            }
          }
        },
        "tags": ["Events"]
      },
      "patch": {
        "operationId": "EventsController_update_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateEventDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates an event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponseTypeEventPatch"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Usually triggered if the request body or provided parameter is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponseType"
                }
              }
            }
          },
          "404": {
            "description": "Entry not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundExceptionType"
                }
              }
            }
          }
        },
        "tags": ["Events"]
      },
      "delete": {
        "operationId": "EventsController_remove_v1",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns true if deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponseTypeEventDelete"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Usually triggered if the request body or provided parameter is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponseType"
                }
              }
            }
          },
          "404": {
            "description": "Entry not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundExceptionType"
                }
              }
            }
          }
        },
        "tags": ["Events"]
      }
    }
  },
  "info": {
    "title": "Events7 API",
    "description": "Event tracker for Outfit7 technical assessment",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "CreateEventDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "type": {
            "type": "string",
            "enum": ["crosspromo", "liveops", "app", "ads"]
          },
          "priority": { "type": "number" }
        },
        "required": ["name", "description", "type", "priority"]
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "type": {
            "type": "string",
            "enum": ["crosspromo", "liveops", "app", "ads"]
          },
          "priority": { "type": "number" },
          "createdAt": { "format": "date-time", "type": "string" },
          "updatedAt": { "format": "date-time", "type": "string" }
        },
        "required": [
          "id",
          "name",
          "description",
          "type",
          "priority",
          "createdAt",
          "updatedAt"
        ]
      },
      "SuccessResponseTypeEventPost": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "message": { "type": "string" },
          "data": { "$ref": "#/components/schemas/Event" }
        },
        "required": ["success", "message", "data"]
      },
      "BadRequestResponseTypeError": {
        "type": "object",
        "properties": {
          "field": { "type": "string" },
          "errors": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["field", "errors"]
      },
      "BadRequestResponseType": {
        "type": "object",
        "properties": {
          "statusCode": { "type": "number", "default": 400 },
          "message": { "type": "string" },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BadRequestResponseTypeError"
            }
          }
        },
        "required": ["statusCode", "message", "errors"]
      },
      "ForbiddenResponseType": {
        "type": "object",
        "properties": {
          "statusCode": { "type": "number" },
          "message": { "type": "string" },
          "error": { "type": "string" }
        },
        "required": ["statusCode", "message", "error"]
      },
      "SuccessResponseTypeEventGetOne": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "message": { "type": "string" },
          "data": {
            "nullable": true,
            "allOf": [{ "$ref": "#/components/schemas/Event" }]
          }
        },
        "required": ["success", "message", "data"]
      },
      "UpdateEventDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "type": {
            "type": "string",
            "enum": ["crosspromo", "liveops", "app", "ads"]
          },
          "priority": { "type": "number" }
        },
        "required": ["name", "description", "type", "priority"]
      },
      "SuccessResponseTypeEventPatch": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "message": { "type": "string" },
          "data": { "$ref": "#/components/schemas/Event" }
        },
        "required": ["success", "message", "data"]
      },
      "NotFoundExceptionType": {
        "type": "object",
        "properties": {
          "message": { "type": "string", "default": "Entry not found" },
          "statusCode": { "type": "number", "default": 404 }
        },
        "required": ["message", "statusCode"]
      },
      "SuccessResponseTypeEventDelete": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "message": { "type": "string" }
        },
        "required": ["success", "message"]
      }
    }
  }
}
